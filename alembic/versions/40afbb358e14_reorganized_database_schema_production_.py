"""Reorganized database schema - production baseline

Revision ID: 40afbb358e14
Revises: 
Create Date: 2025-09-20 07:42:44.093599

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '40afbb358e14'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('audit_logs', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(length=36),
               existing_nullable=False)
    op.drop_index(op.f('ix_audit_logs_created_at'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_is_active'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_updated_at'), table_name='audit_logs')
    op.drop_column('audit_logs', 'is_active')
    op.drop_column('audit_logs', 'version')
    op.alter_column('database_stats', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(length=36),
               existing_nullable=False)
    op.drop_index(op.f('ix_database_stats_created_at'), table_name='database_stats')
    op.drop_index(op.f('ix_database_stats_id'), table_name='database_stats')
    op.drop_index(op.f('ix_database_stats_is_active'), table_name='database_stats')
    op.drop_index(op.f('ix_database_stats_updated_at'), table_name='database_stats')
    op.drop_column('database_stats', 'is_active')
    op.drop_column('database_stats', 'version')
    op.alter_column('email_sends', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(length=36),
               existing_nullable=False)
    op.drop_index(op.f('ix_email_sends_created_at'), table_name='email_sends')
    op.drop_index(op.f('ix_email_sends_id'), table_name='email_sends')
    op.drop_index(op.f('ix_email_sends_is_active'), table_name='email_sends')
    op.drop_index(op.f('ix_email_sends_updated_at'), table_name='email_sends')
    op.drop_column('email_sends', 'is_active')
    op.drop_column('email_sends', 'version')
    op.alter_column('format_elements', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=36),
               existing_nullable=False)
    op.drop_index(op.f('ix_format_elements_created_at'), table_name='format_elements')
    op.drop_index(op.f('ix_format_elements_is_active'), table_name='format_elements')
    op.drop_index(op.f('ix_format_elements_updated_at'), table_name='format_elements')
    op.drop_column('format_elements', 'is_active')
    op.drop_column('format_elements', 'version')
    op.alter_column('processing_logs', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(length=36),
               existing_nullable=False)
    op.drop_index(op.f('ix_processing_logs_created_at'), table_name='processing_logs')
    op.drop_index(op.f('ix_processing_logs_id'), table_name='processing_logs')
    op.drop_index(op.f('ix_processing_logs_is_active'), table_name='processing_logs')
    op.drop_index(op.f('ix_processing_logs_updated_at'), table_name='processing_logs')
    op.drop_column('processing_logs', 'is_active')
    op.drop_column('processing_logs', 'version')
    op.alter_column('requirement_comments', 'requirement_id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('requirement_comments', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=36),
               existing_nullable=False)
    op.alter_column('requirement_comments', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=False)
    op.alter_column('requirement_comments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=False)
    op.create_index('idx_comments_author_type', 'requirement_comments', ['author', 'comment_type'], unique=False)
    op.create_index('idx_req_comments_timeline', 'requirement_comments', ['requirement_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_requirement_comments_author'), 'requirement_comments', ['author'], unique=False)
    op.create_index(op.f('ix_requirement_comments_comment_type'), 'requirement_comments', ['comment_type'], unique=False)
    op.create_index(op.f('ix_requirement_comments_requirement_id'), 'requirement_comments', ['requirement_id'], unique=False)
    op.drop_column('requirement_comments', 'is_active')
    op.add_column('requirement_consultants', sa.Column('role', sa.String(length=100), nullable=True))
    op.add_column('requirement_consultants', sa.Column('priority', sa.Integer(), nullable=True))
    op.alter_column('requirement_consultants', 'requirement_id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('requirement_consultants', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=36),
               existing_nullable=False)
    op.alter_column('requirement_consultants', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=False)
    op.alter_column('requirement_consultants', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=False)
    op.create_index('idx_consultant_name', 'requirement_consultants', ['consultant_name'], unique=False)
    op.create_index(op.f('ix_requirement_consultants_consultant_name'), 'requirement_consultants', ['consultant_name'], unique=False)
    op.create_index(op.f('ix_requirement_consultants_requirement_id'), 'requirement_consultants', ['requirement_id'], unique=False)
    op.create_unique_constraint('unique_req_consultant', 'requirement_consultants', ['requirement_id', 'consultant_name'])
    op.drop_column('requirement_consultants', 'is_active')
    op.drop_column('requirement_consultants', 'status')
    op.alter_column('requirement_summary_view', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(length=36),
               existing_nullable=False)
    op.alter_column('requirement_summary_view', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('requirement_summary_view', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.add_column('requirements', sa.Column('rate', sa.String(length=100), nullable=True))
    op.add_column('requirements', sa.Column('tax_type', sa.String(length=50), server_default='C2C', nullable=False))
    op.add_column('requirements', sa.Column('prime_vendor_company', sa.String(length=255), nullable=True))
    op.add_column('requirements', sa.Column('vendor_company', sa.String(length=255), nullable=True))
    op.add_column('requirements', sa.Column('vendor_person_name', sa.String(length=255), nullable=True))
    op.add_column('requirements', sa.Column('vendor_phone_number', sa.String(length=50), nullable=True))
    op.add_column('requirements', sa.Column('vendor_email', sa.String(length=255), nullable=True))
    op.add_column('requirements', sa.Column('requirement_entered_date', sa.DateTime(timezone=True), nullable=False))
    op.add_column('requirements', sa.Column('got_requirement_from', sa.String(length=100), nullable=False))
    op.add_column('requirements', sa.Column('job_portal_link', sa.Text(), nullable=True))
    op.add_column('requirements', sa.Column('complete_job_description', sa.Text(), nullable=True))
    op.add_column('requirements', sa.Column('required_skills', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('requirements', sa.Column('nice_to_have_skills', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('requirements', sa.Column('job_location', sa.String(length=255), nullable=True))
    op.add_column('requirements', sa.Column('remote_option', sa.Boolean(), nullable=True))
    op.add_column('requirements', sa.Column('salary_range_min', sa.BigInteger(), nullable=True))
    op.add_column('requirements', sa.Column('salary_range_max', sa.BigInteger(), nullable=True))
    op.add_column('requirements', sa.Column('currency', sa.String(length=10), nullable=True))
    op.add_column('requirements', sa.Column('application_deadline', sa.DateTime(timezone=True), nullable=True))
    op.add_column('requirements', sa.Column('application_status', sa.String(length=50), nullable=True))
    op.add_column('requirements', sa.Column('application_date', sa.DateTime(timezone=True), nullable=True))
    op.add_column('requirements', sa.Column('follow_up_date', sa.DateTime(timezone=True), nullable=True))
    op.add_column('requirements', sa.Column('priority_score', sa.Integer(), nullable=True))
    op.add_column('requirements', sa.Column('match_score', sa.Float(), nullable=True))
    op.add_column('requirements', sa.Column('source_url', sa.Text(), nullable=True))
    op.add_column('requirements', sa.Column('referral_source', sa.String(length=255), nullable=True))
    op.add_column('requirements', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('requirements', sa.Column('legacy_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('requirements', sa.Column('interview_id', sa.String(length=100), nullable=True))
    op.alter_column('requirements', 'req_status',
               existing_type=sa.VARCHAR(length=50),
               server_default='New',
               existing_nullable=False)
    op.alter_column('requirements', 'applied_for',
               existing_type=sa.VARCHAR(length=50),
               server_default='Raju',
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('requirements', 'next_step',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('requirements', 'primary_tech_stack',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               nullable=True)
    op.alter_column('requirements', 'tech_stack',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('requirements', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=36),
               existing_nullable=False)
    op.alter_column('requirements', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=False)
    op.alter_column('requirements', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=False)
    op.create_index('idx_client_job_title', 'requirements', ['client_company', 'job_title'], unique=False)
    op.create_index('idx_created_status', 'requirements', ['created_at', 'req_status'], unique=False)
    op.create_index('idx_req_application_tracking', 'requirements', ['application_status', 'application_date'], unique=False)
    op.create_index('idx_req_location_remote', 'requirements', ['job_location', 'remote_option'], unique=False)
    op.create_index('idx_req_priority_status', 'requirements', ['priority_score', 'req_status'], unique=False)
    op.create_index('idx_req_salary_range', 'requirements', ['salary_range_min', 'salary_range_max'], unique=False)
    op.create_index('idx_req_status_applied_for', 'requirements', ['req_status', 'applied_for'], unique=False)
    op.create_index('idx_req_tags_gin', 'requirements', ['tags'], unique=False, postgresql_using='gin')
    op.create_index('idx_requirement_search', 'requirements', ['job_title', 'client_company', 'primary_tech_stack'], unique=False)
    op.create_index('idx_tech_stack_gin', 'requirements', ['tech_stack'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_requirements_application_status'), 'requirements', ['application_status'], unique=False)
    op.create_index(op.f('ix_requirements_applied_for'), 'requirements', ['applied_for'], unique=False)
    op.create_index(op.f('ix_requirements_client_company'), 'requirements', ['client_company'], unique=False)
    op.create_index(op.f('ix_requirements_got_requirement_from'), 'requirements', ['got_requirement_from'], unique=False)
    op.create_index(op.f('ix_requirements_interview_id'), 'requirements', ['interview_id'], unique=True)
    op.create_index(op.f('ix_requirements_job_location'), 'requirements', ['job_location'], unique=False)
    op.create_index(op.f('ix_requirements_job_title'), 'requirements', ['job_title'], unique=False)
    op.create_index(op.f('ix_requirements_primary_tech_stack'), 'requirements', ['primary_tech_stack'], unique=False)
    op.create_index(op.f('ix_requirements_prime_vendor_company'), 'requirements', ['prime_vendor_company'], unique=False)
    op.create_index(op.f('ix_requirements_priority_score'), 'requirements', ['priority_score'], unique=False)
    op.create_index(op.f('ix_requirements_remote_option'), 'requirements', ['remote_option'], unique=False)
    op.create_index(op.f('ix_requirements_req_status'), 'requirements', ['req_status'], unique=False)
    op.create_index(op.f('ix_requirements_requirement_entered_date'), 'requirements', ['requirement_entered_date'], unique=False)
    op.create_index(op.f('ix_requirements_tax_type'), 'requirements', ['tax_type'], unique=False)
    op.create_index(op.f('ix_requirements_vendor_company'), 'requirements', ['vendor_company'], unique=False)
    op.create_index(op.f('ix_requirements_vendor_email'), 'requirements', ['vendor_email'], unique=False)
    op.create_index(op.f('ix_requirements_vendor_person_name'), 'requirements', ['vendor_person_name'], unique=False)
    op.drop_column('requirements', 'description')
    op.drop_column('requirements', 'is_active')
    op.add_column('resume_analytics_view', sa.Column('created_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('resume_analytics_view', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False))
    op.alter_column('resume_analytics_view', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(length=36),
               existing_nullable=False)
    op.alter_column('resume_customizations', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(length=36),
               existing_nullable=False)
    op.drop_index(op.f('ix_resume_customizations_created_at'), table_name='resume_customizations')
    op.drop_index(op.f('ix_resume_customizations_id'), table_name='resume_customizations')
    op.drop_index(op.f('ix_resume_customizations_is_active'), table_name='resume_customizations')
    op.drop_index(op.f('ix_resume_customizations_updated_at'), table_name='resume_customizations')
    op.drop_column('resume_customizations', 'is_active')
    op.drop_column('resume_customizations', 'version')
    op.alter_column('resume_documents', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(length=36),
               existing_nullable=False)
    op.drop_index(op.f('ix_resume_documents_created_at'), table_name='resume_documents')
    op.drop_index(op.f('ix_resume_documents_id'), table_name='resume_documents')
    op.drop_index(op.f('ix_resume_documents_is_active'), table_name='resume_documents')
    op.drop_index(op.f('ix_resume_documents_updated_at'), table_name='resume_documents')
    op.drop_column('resume_documents', 'is_active')
    op.drop_column('resume_documents', 'version')
    op.alter_column('resume_format_matches', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=36),
               existing_nullable=False)
    op.drop_index(op.f('ix_resume_format_matches_created_at'), table_name='resume_format_matches')
    op.drop_index(op.f('ix_resume_format_matches_is_active'), table_name='resume_format_matches')
    op.drop_index(op.f('ix_resume_format_matches_updated_at'), table_name='resume_format_matches')
    op.drop_column('resume_format_matches', 'is_active')
    op.drop_column('resume_format_matches', 'version')
    op.alter_column('resume_formats', 'id',
               existing_type=sa.INTEGER(),
               server_default=None,
               type_=sa.String(length=36),
               existing_nullable=False)
    op.drop_index(op.f('ix_resume_formats_created_at'), table_name='resume_formats')
    op.drop_index(op.f('ix_resume_formats_updated_at'), table_name='resume_formats')
    op.drop_column('resume_formats', 'version')
    op.alter_column('user_sessions', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(length=36),
               existing_nullable=False)
    op.drop_index(op.f('ix_user_sessions_created_at'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_id'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_updated_at'), table_name='user_sessions')
    op.drop_column('user_sessions', 'version')
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.add_column('user_sessions', sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_index(op.f('ix_user_sessions_updated_at'), 'user_sessions', ['updated_at'], unique=False)
    op.create_index(op.f('ix_user_sessions_id'), 'user_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_user_sessions_created_at'), 'user_sessions', ['created_at'], unique=False)
    op.alter_column('user_sessions', 'id',
               existing_type=sa.String(length=36),
               type_=sa.UUID(),
               existing_nullable=False)
    op.add_column('resume_formats', sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_index(op.f('ix_resume_formats_updated_at'), 'resume_formats', ['updated_at'], unique=False)
    op.create_index(op.f('ix_resume_formats_created_at'), 'resume_formats', ['created_at'], unique=False)
    op.alter_column('resume_formats', 'id',
               existing_type=sa.String(length=36),
               server_default=sa.text("nextval('resume_formats_id_seq'::regclass)"),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.add_column('resume_format_matches', sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('resume_format_matches', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.create_index(op.f('ix_resume_format_matches_updated_at'), 'resume_format_matches', ['updated_at'], unique=False)
    op.create_index(op.f('ix_resume_format_matches_is_active'), 'resume_format_matches', ['is_active'], unique=False)
    op.create_index(op.f('ix_resume_format_matches_created_at'), 'resume_format_matches', ['created_at'], unique=False)
    op.alter_column('resume_format_matches', 'id',
               existing_type=sa.String(length=36),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.add_column('resume_documents', sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('resume_documents', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.create_index(op.f('ix_resume_documents_updated_at'), 'resume_documents', ['updated_at'], unique=False)
    op.create_index(op.f('ix_resume_documents_is_active'), 'resume_documents', ['is_active'], unique=False)
    op.create_index(op.f('ix_resume_documents_id'), 'resume_documents', ['id'], unique=False)
    op.create_index(op.f('ix_resume_documents_created_at'), 'resume_documents', ['created_at'], unique=False)
    op.alter_column('resume_documents', 'id',
               existing_type=sa.String(length=36),
               type_=sa.UUID(),
               existing_nullable=False)
    op.add_column('resume_customizations', sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('resume_customizations', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.create_index(op.f('ix_resume_customizations_updated_at'), 'resume_customizations', ['updated_at'], unique=False)
    op.create_index(op.f('ix_resume_customizations_is_active'), 'resume_customizations', ['is_active'], unique=False)
    op.create_index(op.f('ix_resume_customizations_id'), 'resume_customizations', ['id'], unique=False)
    op.create_index(op.f('ix_resume_customizations_created_at'), 'resume_customizations', ['created_at'], unique=False)
    op.alter_column('resume_customizations', 'id',
               existing_type=sa.String(length=36),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('resume_analytics_view', 'id',
               existing_type=sa.String(length=36),
               type_=sa.UUID(),
               existing_nullable=False)
    op.drop_column('resume_analytics_view', 'updated_at')
    op.drop_column('resume_analytics_view', 'created_at')
    op.add_column('requirements', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('requirements', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_requirements_vendor_person_name'), table_name='requirements')
    op.drop_index(op.f('ix_requirements_vendor_email'), table_name='requirements')
    op.drop_index(op.f('ix_requirements_vendor_company'), table_name='requirements')
    op.drop_index(op.f('ix_requirements_tax_type'), table_name='requirements')
    op.drop_index(op.f('ix_requirements_requirement_entered_date'), table_name='requirements')
    op.drop_index(op.f('ix_requirements_req_status'), table_name='requirements')
    op.drop_index(op.f('ix_requirements_remote_option'), table_name='requirements')
    op.drop_index(op.f('ix_requirements_priority_score'), table_name='requirements')
    op.drop_index(op.f('ix_requirements_prime_vendor_company'), table_name='requirements')
    op.drop_index(op.f('ix_requirements_primary_tech_stack'), table_name='requirements')
    op.drop_index(op.f('ix_requirements_job_title'), table_name='requirements')
    op.drop_index(op.f('ix_requirements_job_location'), table_name='requirements')
    op.drop_index(op.f('ix_requirements_interview_id'), table_name='requirements')
    op.drop_index(op.f('ix_requirements_got_requirement_from'), table_name='requirements')
    op.drop_index(op.f('ix_requirements_client_company'), table_name='requirements')
    op.drop_index(op.f('ix_requirements_applied_for'), table_name='requirements')
    op.drop_index(op.f('ix_requirements_application_status'), table_name='requirements')
    op.drop_index('idx_tech_stack_gin', table_name='requirements', postgresql_using='gin')
    op.drop_index('idx_requirement_search', table_name='requirements')
    op.drop_index('idx_req_tags_gin', table_name='requirements', postgresql_using='gin')
    op.drop_index('idx_req_status_applied_for', table_name='requirements')
    op.drop_index('idx_req_salary_range', table_name='requirements')
    op.drop_index('idx_req_priority_status', table_name='requirements')
    op.drop_index('idx_req_location_remote', table_name='requirements')
    op.drop_index('idx_req_application_tracking', table_name='requirements')
    op.drop_index('idx_created_status', table_name='requirements')
    op.drop_index('idx_client_job_title', table_name='requirements')
    op.alter_column('requirements', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               nullable=True)
    op.alter_column('requirements', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               nullable=True)
    op.alter_column('requirements', 'id',
               existing_type=sa.String(length=36),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('requirements', 'tech_stack',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=False)
    op.alter_column('requirements', 'primary_tech_stack',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('requirements', 'next_step',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('requirements', 'applied_for',
               existing_type=sa.String(length=100),
               server_default=None,
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
    op.alter_column('requirements', 'req_status',
               existing_type=sa.VARCHAR(length=50),
               server_default=None,
               existing_nullable=False)
    op.drop_column('requirements', 'interview_id')
    op.drop_column('requirements', 'legacy_data')
    op.drop_column('requirements', 'tags')
    op.drop_column('requirements', 'referral_source')
    op.drop_column('requirements', 'source_url')
    op.drop_column('requirements', 'match_score')
    op.drop_column('requirements', 'priority_score')
    op.drop_column('requirements', 'follow_up_date')
    op.drop_column('requirements', 'application_date')
    op.drop_column('requirements', 'application_status')
    op.drop_column('requirements', 'application_deadline')
    op.drop_column('requirements', 'currency')
    op.drop_column('requirements', 'salary_range_max')
    op.drop_column('requirements', 'salary_range_min')
    op.drop_column('requirements', 'remote_option')
    op.drop_column('requirements', 'job_location')
    op.drop_column('requirements', 'nice_to_have_skills')
    op.drop_column('requirements', 'required_skills')
    op.drop_column('requirements', 'complete_job_description')
    op.drop_column('requirements', 'job_portal_link')
    op.drop_column('requirements', 'got_requirement_from')
    op.drop_column('requirements', 'requirement_entered_date')
    op.drop_column('requirements', 'vendor_email')
    op.drop_column('requirements', 'vendor_phone_number')
    op.drop_column('requirements', 'vendor_person_name')
    op.drop_column('requirements', 'vendor_company')
    op.drop_column('requirements', 'prime_vendor_company')
    op.drop_column('requirements', 'tax_type')
    op.drop_column('requirements', 'rate')
    op.alter_column('requirement_summary_view', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('requirement_summary_view', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('requirement_summary_view', 'id',
               existing_type=sa.String(length=36),
               type_=sa.UUID(),
               existing_nullable=False)
    op.add_column('requirement_consultants', sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('requirement_consultants', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.drop_constraint('unique_req_consultant', 'requirement_consultants', type_='unique')
    op.drop_index(op.f('ix_requirement_consultants_requirement_id'), table_name='requirement_consultants')
    op.drop_index(op.f('ix_requirement_consultants_consultant_name'), table_name='requirement_consultants')
    op.drop_index('idx_consultant_name', table_name='requirement_consultants')
    op.alter_column('requirement_consultants', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               nullable=True)
    op.alter_column('requirement_consultants', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               nullable=True)
    op.alter_column('requirement_consultants', 'id',
               existing_type=sa.String(length=36),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('requirement_consultants', 'requirement_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('requirement_consultants', 'priority')
    op.drop_column('requirement_consultants', 'role')
    op.add_column('requirement_comments', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_requirement_comments_requirement_id'), table_name='requirement_comments')
    op.drop_index(op.f('ix_requirement_comments_comment_type'), table_name='requirement_comments')
    op.drop_index(op.f('ix_requirement_comments_author'), table_name='requirement_comments')
    op.drop_index('idx_req_comments_timeline', table_name='requirement_comments')
    op.drop_index('idx_comments_author_type', table_name='requirement_comments')
    op.alter_column('requirement_comments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               nullable=True)
    op.alter_column('requirement_comments', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               nullable=True)
    op.alter_column('requirement_comments', 'id',
               existing_type=sa.String(length=36),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('requirement_comments', 'requirement_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.add_column('processing_logs', sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('processing_logs', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.create_index(op.f('ix_processing_logs_updated_at'), 'processing_logs', ['updated_at'], unique=False)
    op.create_index(op.f('ix_processing_logs_is_active'), 'processing_logs', ['is_active'], unique=False)
    op.create_index(op.f('ix_processing_logs_id'), 'processing_logs', ['id'], unique=False)
    op.create_index(op.f('ix_processing_logs_created_at'), 'processing_logs', ['created_at'], unique=False)
    op.alter_column('processing_logs', 'id',
               existing_type=sa.String(length=36),
               type_=sa.UUID(),
               existing_nullable=False)
    op.add_column('format_elements', sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('format_elements', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.create_index(op.f('ix_format_elements_updated_at'), 'format_elements', ['updated_at'], unique=False)
    op.create_index(op.f('ix_format_elements_is_active'), 'format_elements', ['is_active'], unique=False)
    op.create_index(op.f('ix_format_elements_created_at'), 'format_elements', ['created_at'], unique=False)
    op.alter_column('format_elements', 'id',
               existing_type=sa.String(length=36),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.add_column('email_sends', sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('email_sends', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.create_index(op.f('ix_email_sends_updated_at'), 'email_sends', ['updated_at'], unique=False)
    op.create_index(op.f('ix_email_sends_is_active'), 'email_sends', ['is_active'], unique=False)
    op.create_index(op.f('ix_email_sends_id'), 'email_sends', ['id'], unique=False)
    op.create_index(op.f('ix_email_sends_created_at'), 'email_sends', ['created_at'], unique=False)
    op.alter_column('email_sends', 'id',
               existing_type=sa.String(length=36),
               type_=sa.UUID(),
               existing_nullable=False)
    op.add_column('database_stats', sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('database_stats', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.create_index(op.f('ix_database_stats_updated_at'), 'database_stats', ['updated_at'], unique=False)
    op.create_index(op.f('ix_database_stats_is_active'), 'database_stats', ['is_active'], unique=False)
    op.create_index(op.f('ix_database_stats_id'), 'database_stats', ['id'], unique=False)
    op.create_index(op.f('ix_database_stats_created_at'), 'database_stats', ['created_at'], unique=False)
    op.alter_column('database_stats', 'id',
               existing_type=sa.String(length=36),
               type_=sa.UUID(),
               existing_nullable=False)
    op.add_column('audit_logs', sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('audit_logs', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.create_index(op.f('ix_audit_logs_updated_at'), 'audit_logs', ['updated_at'], unique=False)
    op.create_index(op.f('ix_audit_logs_is_active'), 'audit_logs', ['is_active'], unique=False)
    op.create_index(op.f('ix_audit_logs_id'), 'audit_logs', ['id'], unique=False)
    op.create_index(op.f('ix_audit_logs_created_at'), 'audit_logs', ['created_at'], unique=False)
    op.alter_column('audit_logs', 'id',
               existing_type=sa.String(length=36),
               type_=sa.UUID(),
               existing_nullable=False)
    # ### end Alembic commands ###
